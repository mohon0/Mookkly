// prisma/schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           UserRole         @default(USER)
  authenticators Authenticator[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  products       Product[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String @id @map("_id")
  userId               String @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProductCondition {
  NEW
  LIKE_NEW
  EXCELLENT
  GOOD
  FAIR
  POOR
  FOR_PARTS
}

model Product {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  productName          String
  description          String
  category             String
  subcategory          String
  tags                 String[]
  
  sku                  String           @unique
  barcode              String?
  
  price                Float
  discountPrice        Float?
  discountPercent      Float?
  stock                Int
  lowStockAlert        Int
  
  condition            ProductCondition
  conditionDescription String?
  
  weight               Float?
  dimensions           Dimensions?
  
  shippingClass        String?
  freeShipping         Boolean          @default(false)
  
  metaTitle            String?
  metaDescription      String?
  slug                 String           @unique
  
  hasVariants          Boolean          @default(false)
  variants             ProductVariant[]
  attributes           Json?
  
  isPublished          Boolean          @default(false)
  createdBy            String           @db.ObjectId
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  
  user                 User             @relation(fields: [createdBy], references: [id])
  
  @@index([category, subcategory], name: "category_index")
  @@index([createdBy], name: "creator_index")
}

type Dimensions {
  length Float
  width  Float
  height Float
  unit   String  // Removed default as composite type fields cannot have default values
}

model ProductVariant {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  sku        String   @unique
  attributes Json
  price      Float?
  stock      Int
  barcode    String?
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([productId], name: "variant_product_index")
}

model Category {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String      @unique
  description String?
  parentId    String?     @db.ObjectId
  parent      Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Changed to NoAction
  children    Category[]  @relation("CategoryHierarchy")
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([parentId], name: "parent_category_index")
}


enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model Order {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber     String         @unique
  status          OrderStatus    @default(PENDING)
  customerEmail   String
  customerName    String?
  items           OrderItem[]
  subtotal        Float
  tax             Float
  shipping        Float
  total           Float
  shippingAddress Address?
  billingAddress  Address?
  paymentMethod   String?
  paymentStatus   String?
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@index([customerEmail], name: "customer_email_index")
  @@index([status], name: "order_status_index")
}

model OrderItem {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String   @db.ObjectId
  productSku   String
  productName  String
  variantInfo  Json?
  quantity     Int
  price        Float
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId], name: "order_item_order_index")
  @@index([productSku], name: "order_item_sku_index")
}

type Address {
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String
  phone       String?
}
